name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy ruff
    
    - name: Lint with ruff
      run: |
        ruff check src/ test/
    
    - name: Check code formatting with black
      run: |
        black --check src/ test/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/ test/
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run tests with pytest
      run: |
        pytest test/ --cov=bot --cov-report=xml --cov-report=term-missing --cov-fail-under=100
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build image for tests (local)
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: valheim-discord-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Log in to Docker Hub
      id: docker_login
      continue-on-error: true
      if: ${{ github.event_name != 'pull_request' }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: pequodai/valheim-discord-bot
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      if: ${{ steps.docker_login.outcome == 'success' }}
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm --entrypoint python valheim-discord-bot:test -c "import a2s; import discord; print('Docker image test passed')"

  deploy:
    name: Deploy to Cloud Run
    needs: docker
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Prepare deploy conditions
        id: prepare_deploy
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "should_deploy=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ -z "${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}" ] || [ -z "${{ secrets.GCP_SERVICE_ACCOUNT }}" ]; then
            echo "Missing GCP secrets; skipping deploy."\
            && echo "should_deploy=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "should_deploy=true" >> "$GITHUB_OUTPUT"

      - uses: 'google-github-actions/auth@v2'
        if: ${{ steps.prepare_deploy.outputs.should_deploy == 'true' }}
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'

      - name: 'Deploy to Cloud Run'
        if: ${{ steps.prepare_deploy.outputs.should_deploy == 'true' }}
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ vars.GCP_SERVICE_NAME }}'
          region: '${{ vars.GCP_REGION }}'
          image: 'pequodai/valheim-discord-bot:latest'
          env_vars: |
            DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
            DISCORD_CHANNEL_ID=${{ vars.DISCORD_CHANNEL_ID }}
            DISCORD_MESSAGE_ID=${{ vars.DISCORD_MESSAGE_ID }}
            VALHEIM_HOST=${{ vars.VALHEIM_HOST }}
            VALHEIM_QUERY_PORT=${{ vars.VALHEIM_QUERY_PORT }}
            UPDATE_PERIOD=${{ vars.UPDATE_PERIOD }}
 